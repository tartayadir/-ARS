/*
 * API Car catalog V1.0
 * This is API for work with the car catalog server. For this sample, you can use the JWT to test the authorization filters and perform authorized requests to server like add ordelete car. You should put your JWT token with prefix \"Bearer \" in authorise filed to authorize. Also, there are examples of request and response that you can use for test API. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: welcome@implemica.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.v3.oas.annotations.media.Schema;
import lombok.Builder;
import lombok.Data;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
/**
 * CarDTO
 */

@Builder
@Data
@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2023-01-31T09:53:54.832Z[GMT]")
public class CarDTO {
  @SerializedName("additionalOptions")
  private List<String> additionalOptions = null;

  /**
   * Car brand refers to the basic concept. Otherwise, can be called as a brand or trademark.
   */
  @JsonAdapter(BrandEnum.Adapter.class)
  public enum BrandEnum {
    ACURA("ACURA"),
    ALFA("ALFA"),
    ASTON_MARTIN("ASTON_MARTIN"),
    AUDI("AUDI"),
    BENTLEY("BENTLEY"),
    BMW("BMW"),
    BRILLIANCE("BRILLIANCE"),
    BUGATTI("BUGATTI"),
    BUICK("BUICK"),
    BYD("BYD"),
    CADILLAC("CADILLAC"),
    CHANGAN("CHANGAN"),
    CHERY("CHERY"),
    CHEVROLET("CHEVROLET"),
    CHRYSLER("CHRYSLER"),
    CITROEN("CITROEN"),
    DACIA("DACIA"),
    DAEWOO("DAEWOO"),
    DAIHATSU("DAIHATSU"),
    DATSUN("DATSUN"),
    DODGE("DODGE"),
    FAW("FAW"),
    FERRARI("FERRARI"),
    FIAT("FIAT"),
    FORD("FORD"),
    GEELY("GEELY"),
    GENESIS("GENESIS"),
    GMC("GMC"),
    GREAT_WALL("GREAT_WALL"),
    HAVAL_ROVER("HAVAL_ROVER"),
    HONDA("HONDA"),
    HUMMER("HUMMER"),
    HYUNDAI("HYUNDAI"),
    INFINITI("INFINITI"),
    JAGUAR("JAGUAR"),
    JEEP("JEEP"),
    KIA("KIA"),
    LAMBORGHINI("LAMBORGHINI"),
    LANCIA("LANCIA"),
    LAND_ROVER("LAND_ROVER"),
    LEXUS("LEXUS"),
    LIFAN("LIFAN"),
    LINCOLN("LINCOLN"),
    LOTUS("LOTUS"),
    MARUSSIA("MARUSSIA"),
    MASERATI("MASERATI"),
    MAYBACH("MAYBACH"),
    MAZDA("MAZDA"),
    MCLAREN("MCLAREN"),
    MERCEDES("MERCEDES"),
    MINI("MINI"),
    MITSUBISHI("MITSUBISHI"),
    NISSAN("NISSAN"),
    OPEL("OPEL"),
    PEUGEOT("PEUGEOT"),
    PONTIAC("PONTIAC"),
    PORSCHE("PORSCHE"),
    RENAULT("RENAULT"),
    ROLLS_ROYCE("ROLLS_ROYCE"),
    ROMEO("ROMEO"),
    SAAB("SAAB"),
    SEAT("SEAT"),
    SKODA("SKODA"),
    SMART("SMART"),
    SSANGYONG("SSANGYONG"),
    SUBARU("SUBARU"),
    SUZUKI("SUZUKI"),
    TAGAZ("TAGAZ"),
    TESLA("TESLA"),
    TOYOTA("TOYOTA"),
    VOLKSWAGEN("VOLKSWAGEN"),
    VOLVO("VOLVO");

    private String value;

    BrandEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static BrandEnum fromValue(String input) {
      for (BrandEnum b : BrandEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<BrandEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BrandEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public BrandEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return BrandEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("brand")
  private BrandEnum brand = null;

  /**
   * It is an element of the car design that determines the size, type and capacity of the car to carry goods and passengers.
   */
  @JsonAdapter(CarBodyTypesEnum.Adapter.class)
  public enum CarBodyTypesEnum {
    CONVERTIBLE("CONVERTIBLE"),
    COUPE("COUPE"),
    HATCHBACK("HATCHBACK"),
    MINIVAN("MINIVAN"),
    PICKUP("PICKUP"),
    SEDAN("SEDAN"),
    SPORTS_CAR("SPORTS_CAR"),
    STATION_WAGON("STATION_WAGON"),
    SUV("SUV");

    private String value;

    CarBodyTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CarBodyTypesEnum fromValue(String input) {
      for (CarBodyTypesEnum b : CarBodyTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CarBodyTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CarBodyTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public CarBodyTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return CarBodyTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("carBodyTypes")
  private CarBodyTypesEnum carBodyTypes = null;

  @SerializedName("engineCapacity")
  private Double engineCapacity = null;

  @SerializedName("fullDescription")
  private String fullDescription = null;

  @SerializedName("id")
  private Long id = null;

  @SerializedName("imageFileId")
  private String imageFileId = null;

  @SerializedName("model")
  private String model = null;

  @SerializedName("shortDescription")
  private String shortDescription = null;

  /**
   * is a collection of different units and mechanisms that transmit torque from the engine to the driving wheels and change it in size and direction.
   */
  @JsonAdapter(TransmissionBoxTypesEnum.Adapter.class)
  public enum TransmissionBoxTypesEnum {
    AUTOMATIC("AUTOMATIC"),
    MECHANICAL("MECHANICAL"),
    ROBOTIC("ROBOTIC"),
    VARIATIONAL("VARIATIONAL");

    private String value;

    TransmissionBoxTypesEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static TransmissionBoxTypesEnum fromValue(String input) {
      for (TransmissionBoxTypesEnum b : TransmissionBoxTypesEnum.values()) {
        if (b.value.equals(input)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<TransmissionBoxTypesEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TransmissionBoxTypesEnum enumeration) throws IOException {
        jsonWriter.value(String.valueOf(enumeration.getValue()));
      }

      @Override
      public TransmissionBoxTypesEnum read(final JsonReader jsonReader) throws IOException {
        Object value = jsonReader.nextString();
        return TransmissionBoxTypesEnum.fromValue((String)(value));
      }
    }
  }  @SerializedName("transmissionBoxTypes")
  private TransmissionBoxTypesEnum transmissionBoxTypes = null;

  @SerializedName("year")
  private Integer year = null;

  public CarDTO additionalOptions(List<String> additionalOptions) {
    this.additionalOptions = additionalOptions;
    return this;
  }

  public CarDTO addAdditionalOptionsItem(String additionalOptionsItem) {
    if (this.additionalOptions == null) {
      this.additionalOptions = new ArrayList<String>();
    }
    this.additionalOptions.add(additionalOptionsItem);
    return this;
  }

   /**
   * Additional options allow you to equip the selected package already needed by the owner list of features.
   * @return additionalOptions
  **/
  @Schema(example = "[\"Infotainment\",\"Advanced driver aids\",\"Extended Warranties\",\"Keyless entry and ignition\"]", description = "Additional options allow you to equip the selected package already needed by the owner list of features.")
  public List<String> getAdditionalOptions() {
    return additionalOptions;
  }

  public void setAdditionalOptions(List<String> additionalOptions) {
    this.additionalOptions = additionalOptions;
  }

  public CarDTO brand(BrandEnum brand) {
    this.brand = brand;
    return this;
  }

   /**
   * Car brand refers to the basic concept. Otherwise, can be called as a brand or trademark.
   * @return brand
  **/
  @Schema(example = "MAZDA", description = "Car brand refers to the basic concept. Otherwise, can be called as a brand or trademark.")
  public BrandEnum getBrand() {
    return brand;
  }

  public void setBrand(BrandEnum brand) {
    this.brand = brand;
  }

  public CarDTO carBodyTypes(CarBodyTypesEnum carBodyTypes) {
    this.carBodyTypes = carBodyTypes;
    return this;
  }

   /**
   * It is an element of the car design that determines the size, type and capacity of the car to carry goods and passengers.
   * @return carBodyTypes
  **/
  @Schema(example = "PICKUP", description = "It is an element of the car design that determines the size, type and capacity of the car to carry goods and passengers.")
  public CarBodyTypesEnum getCarBodyTypes() {
    return carBodyTypes;
  }

  public void setCarBodyTypes(CarBodyTypesEnum carBodyTypes) {
    this.carBodyTypes = carBodyTypes;
  }

  public CarDTO engineCapacity(Double engineCapacity) {
    this.engineCapacity = engineCapacity;
    return this;
  }

   /**
   * The engine volume is defined as the total volume of all cylinders, or the volume of one cylinder multiplied by their number.
   * minimum: 0
   * maximum: 15
   * @return engineCapacity
  **/
  @Schema(example = "3.5", description = "The engine volume is defined as the total volume of all cylinders, or the volume of one cylinder multiplied by their number.")
  public Double getEngineCapacity() {
    return engineCapacity;
  }

  public void setEngineCapacity(Double engineCapacity) {
    this.engineCapacity = engineCapacity;
  }

  public CarDTO fullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
    return this;
  }

   /**
   * It is the full description of car that contains some details about car.
   * @return fullDescription
  **/
  @Schema(example = "A mid-sized coupe, it launched in 2003, just as mid-sized coupes were kinda dying out. The asteroid was certainly on its way, at least. Rewind to the Nineties and this was a bustling corner of the market. But sitting and naming some of the numerous mainstream examples – Calibra, Cougar, Prelude, Coupe (not every carmaker was imaginative) – only makes you realise how long ago this chapter closed. The rise of the SUV didn’t only claim the four-door repmobile’s popularity.  But the RX-8 was never really billed as a rival to mainstream coupes, even if its ample practicality and modest power output placed it right on their turf. It instead launched in tandem with the Nissan 350Z to join the Honda S2000 in the 'attainable Japanese sports car' sub-niche. These were cars riding the wave of The Fast and the Furious’ success, bringing a bit of JDM sparkle to early Noughties Britain.", description = "It is the full description of car that contains some details about car.")
  public String getFullDescription() {
    return fullDescription;
  }

  public void setFullDescription(String fullDescription) {
    this.fullDescription = fullDescription;
  }

  public CarDTO id(Long id) {
    this.id = id;
    return this;
  }

   /**
   * Car ID that is used for find car in data base.
   * @return id
  **/
  @Schema(example = "10", description = "Car ID that is used for find car in data base.")
  public Long getId() {
    return id;
  }

  public void setId(Long id) {
    this.id = id;
  }

  public CarDTO imageFileId(String imageFileId) {
    this.imageFileId = imageFileId;
    return this;
  }

   /**
   * Car image file name that you can find at AWS S# by it.
   * @return imageFileId
  **/
  @Schema(example = "default-car-image", description = "Car image file name that you can find at AWS S# by it.")
  public String getImageFileId() {
    return imageFileId;
  }

  public void setImageFileId(String imageFileId) {
    this.imageFileId = imageFileId;
  }

  public CarDTO model(String model) {
    this.model = model;
    return this;
  }

   /**
   * The model describes the type of vehicle (what type of body) produced under a certain brand.
   * @return model
  **/
  @Schema(example = "RX 8", description = "The model describes the type of vehicle (what type of body) produced under a certain brand.")
  public String getModel() {
    return model;
  }

  public void setModel(String model) {
    this.model = model;
  }

  public CarDTO shortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
    return this;
  }

   /**
   * It is the short description of car that describe car in general.
   * @return shortDescription
  **/
  @Schema(example = "Rarely has a car broken with convention in such a wanton manner. The RX-8 appears to be everything cars today aren’t, and indeed it seemed to be swimming upstream for a fair few years of its existence.", description = "It is the short description of car that describe car in general.")
  public String getShortDescription() {
    return shortDescription;
  }

  public void setShortDescription(String shortDescription) {
    this.shortDescription = shortDescription;
  }

  public CarDTO transmissionBoxTypes(TransmissionBoxTypesEnum transmissionBoxTypes) {
    this.transmissionBoxTypes = transmissionBoxTypes;
    return this;
  }

   /**
   * is a collection of different units and mechanisms that transmit torque from the engine to the driving wheels and change it in size and direction.
   * @return transmissionBoxTypes
  **/
  @Schema(example = "ROBOTIC", description = "is a collection of different units and mechanisms that transmit torque from the engine to the driving wheels and change it in size and direction.")
  public TransmissionBoxTypesEnum getTransmissionBoxTypes() {
    return transmissionBoxTypes;
  }

  public void setTransmissionBoxTypes(TransmissionBoxTypesEnum transmissionBoxTypes) {
    this.transmissionBoxTypes = transmissionBoxTypes;
  }

  public CarDTO year(Integer year) {
    this.year = year;
    return this;
  }

   /**
   * The year of issue is indicated by one digit, which corresponds to the last digit of the calendar year (similar to VIN).
   * @return year
  **/
  @Schema(example = "2004", description = "The year of issue is indicated by one digit, which corresponds to the last digit of the calendar year (similar to VIN).")
  public Integer getYear() {
    return year;
  }

  public void setYear(Integer year) {
    this.year = year;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CarDTO carDTO = (CarDTO) o;
    return Objects.equals(this.additionalOptions, carDTO.additionalOptions) &&
        Objects.equals(this.brand, carDTO.brand) &&
        Objects.equals(this.carBodyTypes, carDTO.carBodyTypes) &&
        Objects.equals(this.engineCapacity, carDTO.engineCapacity) &&
        Objects.equals(this.fullDescription, carDTO.fullDescription) &&
        Objects.equals(this.id, carDTO.id) &&
        Objects.equals(this.imageFileId, carDTO.imageFileId) &&
        Objects.equals(this.model, carDTO.model) &&
        Objects.equals(this.shortDescription, carDTO.shortDescription) &&
        Objects.equals(this.transmissionBoxTypes, carDTO.transmissionBoxTypes) &&
        Objects.equals(this.year, carDTO.year);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalOptions, brand, carBodyTypes, engineCapacity, fullDescription, id, imageFileId, model, shortDescription, transmissionBoxTypes, year);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CarDTO {\n");
    
    sb.append("    additionalOptions: ").append(toIndentedString(additionalOptions)).append("\n");
    sb.append("    brand: ").append(toIndentedString(brand)).append("\n");
    sb.append("    carBodyTypes: ").append(toIndentedString(carBodyTypes)).append("\n");
    sb.append("    engineCapacity: ").append(toIndentedString(engineCapacity)).append("\n");
    sb.append("    fullDescription: ").append(toIndentedString(fullDescription)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageFileId: ").append(toIndentedString(imageFileId)).append("\n");
    sb.append("    model: ").append(toIndentedString(model)).append("\n");
    sb.append("    shortDescription: ").append(toIndentedString(shortDescription)).append("\n");
    sb.append("    transmissionBoxTypes: ").append(toIndentedString(transmissionBoxTypes)).append("\n");
    sb.append("    year: ").append(toIndentedString(year)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
