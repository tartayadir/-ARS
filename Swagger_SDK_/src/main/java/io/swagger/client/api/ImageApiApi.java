/*
 * API Car catalog V1.0
 * This is API for work with the car catalog server. For this sample, you can use the JWT to test the authorization filters and perform authorized requests to server like add ordelete car. You should put your JWT token with prefix \"Bearer \" in authorise filed to authorize. Also, there are examples of request and response that you can use for test API. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: welcome@implemica.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageApiApi {
    private ApiClient apiClient;

    public ImageApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageApiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for deleteFileUsingDELETE
     * @param imageFileId imageId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETECall(String imageFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/image/{imageId}"
            .replaceAll("\\{" + "Image file id" + "\\}", apiClient.escapeString(imageFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call deleteFileUsingDELETEValidateBeforeCall(String imageFileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'imageFileId' is set
        if (imageFileId == null) {
            throw new ApiException("Missing the required parameter 'imageFileId' when calling deleteFileUsingDELETE(Async)");
        }
        
        com.squareup.okhttp.Call call = deleteFileUsingDELETECall(imageFileId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete image.
     * Deletes car image by their name if image is not found returns 404 http status.
     * @param imageFileId imageId (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void deleteFileUsingDELETE(String imageFileId) throws ApiException {
        deleteFileUsingDELETEWithHttpInfo(imageFileId);
    }

    /**
     * Delete image.
     * Deletes car image by their name if image is not found returns 404 http status.
     * @param imageFileId imageId (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> deleteFileUsingDELETEWithHttpInfo(String imageFileId) throws ApiException {
        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(imageFileId, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete image. (asynchronously)
     * Deletes car image by their name if image is not found returns 404 http status.
     * @param imageFileId imageId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call deleteFileUsingDELETEAsync(String imageFileId, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = deleteFileUsingDELETEValidateBeforeCall(imageFileId, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for uploadFileUsingPOST
     * @param imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId imageId (required)
     * @param imageFile  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadFileUsingPOSTCall(String imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, File imageFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/image/{imageId}"
            .replaceAll("\\{" + "image file name that has car and get from AWS S3 by its image file id" + "\\}", apiClient.escapeString(imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (imageFile != null)
        localVarFormParams.put("imageFile", imageFile);

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadFileUsingPOSTValidateBeforeCall(String imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, File imageFile, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId' is set
        if (imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId == null) {
            throw new ApiException("Missing the required parameter 'imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId' when calling uploadFileUsingPOST(Async)");
        }
        
        com.squareup.okhttp.Call call = uploadFileUsingPOSTCall(imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, imageFile, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload image.
     * Loads the image to AWS S3 and set image id to this file, if not a graft extension, returns 400 http status.
     * @param imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId imageId (required)
     * @param imageFile  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void uploadFileUsingPOST(String imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, File imageFile) throws ApiException {
        uploadFileUsingPOSTWithHttpInfo(imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, imageFile);
    }

    /**
     * Upload image.
     * Loads the image to AWS S3 and set image id to this file, if not a graft extension, returns 400 http status.
     * @param imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId imageId (required)
     * @param imageFile  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> uploadFileUsingPOSTWithHttpInfo(String imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, File imageFile) throws ApiException {
        com.squareup.okhttp.Call call = uploadFileUsingPOSTValidateBeforeCall(imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, imageFile, null, null);
        return apiClient.execute(call);
    }

    /**
     * Upload image. (asynchronously)
     * Loads the image to AWS S3 and set image id to this file, if not a graft extension, returns 400 http status.
     * @param imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId imageId (required)
     * @param imageFile  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadFileUsingPOSTAsync(String imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, File imageFile, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadFileUsingPOSTValidateBeforeCall(imageFileNameThatHasCarAndGetFromAWSS3ByItsImageFileId, imageFile, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
