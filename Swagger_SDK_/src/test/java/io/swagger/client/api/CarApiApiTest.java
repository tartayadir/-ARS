/*
 * API Car catalog V1.0
 * This is API for work with the car catalog server. For this sample, you can use the JWT to test the authorization filters and perform authorized requests to server like add ordelete car. You should put your JWT token with prefix \"Bearer \" in authorise filed to authorize. Also, there are examples of request and response that you can use for test API. 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: welcome@implemica.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.api;

import io.swagger.client.model.CarDTO;
import org.junit.Test;
import org.junit.Ignore;


import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * API tests for CarApiApi
 */
@Ignore
public class CarApiApiTest {

    private final CarApiApi api = new CarApiApi();

    /**
     * Add car.
     *
     * Makes the car and returns the car if all fields of the machine are valid. If not valid then return 400.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void addCarUsingPOSTTest() throws Exception {
        CarDTO body = null;
        CarDTO response = api.addCarUsingPOST(body);

        // TODO: test validations
    }
    /**
     * All cars.
     *
     * Returns all owned сфкы.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getAllCarsUsingGETTest() throws Exception {
        List<CarDTO> response = api.getAllCarsUsingGET();

        // TODO: test validations
    }
    /**
     * Found car.
     *
     * Returns the car by id if the car was found. If no such machine is found, it returns 404 or if no valid id returns 400.
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void getCarUsingGETTest() throws Exception {
        Long id = null;
        CarDTO response = api.getCarUsingGET(id);

        // TODO: test validations
    }
    /**
     * Delete car and their image.
     *
     * Removes machine and image by id. For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void removeCarUsingDELETETest() throws Exception {
        Long id = null;
        String imageId = null;
        CarDTO response = api.removeCarUsingDELETE(id, imageId);

        // TODO: test validations
    }
    /**
     * Update car.
     *
     * Finds the car by the id and updates it. If the fields are not valid then return 400 or if the cars were not found, return 404
     *
     * @throws Exception
     *          if the Api call fails
     */
    @Test
    public void updateCarUsingPUTTest() throws Exception {
        CarDTO body = null;
        CarDTO response = api.updateCarUsingPUT(body);

        // TODO: test validations
    }
}
